// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package etl_pib.fact_complains_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Fact_Complains Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Fact_Complains implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Fact_Complains";
	private final String projectName = "ETL_PIB";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Fact_Complains.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Fact_Complains.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputExcel_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputExcel_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class Fact_ComplainsStruct implements routines.system.IPersistableRow<Fact_ComplainsStruct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public int ComplainDateID;

		public int getComplainDateID() {
			return this.ComplainDateID;
		}

		public int CompletionDateID;

		public int getCompletionDateID() {
			return this.CompletionDateID;
		}

		public int BrokerID;

		public int getBrokerID() {
			return this.BrokerID;
		}

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ClientSatisfaction;

		public String getClientSatisfaction() {
			return this.ClientSatisfaction;
		}

		public Float ExpectedReimbursement;

		public Float getExpectedReimbursement() {
			return this.ExpectedReimbursement;
		}

		public Float Change_Freq;

		public Float getChange_Freq() {
			return this.Change_Freq;
		}

		public Float Services_Sat_Rate_On5;

		public Float getServices_Sat_Rate_On5() {
			return this.Services_Sat_Rate_On5;
		}

		public Float Complain_Sat_Rate;

		public Float getComplain_Sat_Rate() {
			return this.Complain_Sat_Rate;
		}

		public Float Res_Time_Days_Expected;

		public Float getRes_Time_Days_Expected() {
			return this.Res_Time_Days_Expected;
		}

		public Float Price_Sat_Rate;

		public Float getPrice_Sat_Rate() {
			return this.Price_Sat_Rate;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());

				result = prime * result + (int) this.ComplainDateID;

				result = prime * result + (int) this.CompletionDateID;

				result = prime * result + (int) this.BrokerID;

				result = prime * result + (int) this.CustomerID;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final Fact_ComplainsStruct other = (Fact_ComplainsStruct) obj;

			if (this.ID == null) {
				if (other.ID != null)
					return false;

			} else if (!this.ID.equals(other.ID))

				return false;

			if (this.ComplainDateID != other.ComplainDateID)
				return false;

			if (this.CompletionDateID != other.CompletionDateID)
				return false;

			if (this.BrokerID != other.BrokerID)
				return false;

			if (this.CustomerID != other.CustomerID)
				return false;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(Fact_ComplainsStruct other) {

			other.ID = this.ID;
			other.ComplainDateID = this.ComplainDateID;
			other.CompletionDateID = this.CompletionDateID;
			other.BrokerID = this.BrokerID;
			other.CustomerID = this.CustomerID;
			other.ProductID = this.ProductID;
			other.ClientSatisfaction = this.ClientSatisfaction;
			other.ExpectedReimbursement = this.ExpectedReimbursement;
			other.Change_Freq = this.Change_Freq;
			other.Services_Sat_Rate_On5 = this.Services_Sat_Rate_On5;
			other.Complain_Sat_Rate = this.Complain_Sat_Rate;
			other.Res_Time_Days_Expected = this.Res_Time_Days_Expected;
			other.Price_Sat_Rate = this.Price_Sat_Rate;

		}

		public void copyKeysDataTo(Fact_ComplainsStruct other) {

			other.ID = this.ID;
			other.ComplainDateID = this.ComplainDateID;
			other.CompletionDateID = this.CompletionDateID;
			other.BrokerID = this.BrokerID;
			other.CustomerID = this.CustomerID;
			other.ProductID = this.ProductID;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PIB_Fact_Complains.length) {
					if (length < 1024 && commonByteArray_ETL_PIB_Fact_Complains.length == 0) {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[1024];
					} else {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PIB_Fact_Complains, 0, length);
				strReturn = new String(commonByteArray_ETL_PIB_Fact_Complains, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.ComplainDateID = dis.readInt();

					this.CompletionDateID = dis.readInt();

					this.BrokerID = dis.readInt();

					this.CustomerID = dis.readInt();

					this.ProductID = dis.readInt();

					this.ClientSatisfaction = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ExpectedReimbursement = null;
					} else {
						this.ExpectedReimbursement = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Change_Freq = null;
					} else {
						this.Change_Freq = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Services_Sat_Rate_On5 = null;
					} else {
						this.Services_Sat_Rate_On5 = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Complain_Sat_Rate = null;
					} else {
						this.Complain_Sat_Rate = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Res_Time_Days_Expected = null;
					} else {
						this.Res_Time_Days_Expected = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.Price_Sat_Rate = null;
					} else {
						this.Price_Sat_Rate = dis.readFloat();
					}

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// int

				dos.writeInt(this.ComplainDateID);

				// int

				dos.writeInt(this.CompletionDateID);

				// int

				dos.writeInt(this.BrokerID);

				// int

				dos.writeInt(this.CustomerID);

				// int

				dos.writeInt(this.ProductID);

				// String

				writeString(this.ClientSatisfaction, dos);

				// Float

				if (this.ExpectedReimbursement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ExpectedReimbursement);
				}

				// Float

				if (this.Change_Freq == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Change_Freq);
				}

				// Float

				if (this.Services_Sat_Rate_On5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Services_Sat_Rate_On5);
				}

				// Float

				if (this.Complain_Sat_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Complain_Sat_Rate);
				}

				// Float

				if (this.Res_Time_Days_Expected == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Res_Time_Days_Expected);
				}

				// Float

				if (this.Price_Sat_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price_Sat_Rate);
				}

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",ComplainDateID=" + String.valueOf(ComplainDateID));
			sb.append(",CompletionDateID=" + String.valueOf(CompletionDateID));
			sb.append(",BrokerID=" + String.valueOf(BrokerID));
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ClientSatisfaction=" + ClientSatisfaction);
			sb.append(",ExpectedReimbursement=" + String.valueOf(ExpectedReimbursement));
			sb.append(",Change_Freq=" + String.valueOf(Change_Freq));
			sb.append(",Services_Sat_Rate_On5=" + String.valueOf(Services_Sat_Rate_On5));
			sb.append(",Complain_Sat_Rate=" + String.valueOf(Complain_Sat_Rate));
			sb.append(",Res_Time_Days_Expected=" + String.valueOf(Res_Time_Days_Expected));
			sb.append(",Price_Sat_Rate=" + String.valueOf(Price_Sat_Rate));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(Fact_ComplainsStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ID, other.ID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ComplainDateID, other.ComplainDateID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CompletionDateID, other.CompletionDateID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.BrokerID, other.BrokerID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public java.util.Date ComplainDate;

		public java.util.Date getComplainDate() {
			return this.ComplainDate;
		}

		public String CompletionDate;

		public String getCompletionDate() {
			return this.CompletionDate;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		public Integer BrokerID;

		public Integer getBrokerID() {
			return this.BrokerID;
		}

		public Integer ProductID;

		public Integer getProductID() {
			return this.ProductID;
		}

		public Integer ComplainPriorityID;

		public Integer getComplainPriorityID() {
			return this.ComplainPriorityID;
		}

		public Integer ComplainTypeID;

		public Integer getComplainTypeID() {
			return this.ComplainTypeID;
		}

		public Integer ComplainSourceID;

		public Integer getComplainSourceID() {
			return this.ComplainSourceID;
		}

		public Integer ComplainCategoryID;

		public Integer getComplainCategoryID() {
			return this.ComplainCategoryID;
		}

		public Integer ComplainStatusID;

		public Integer getComplainStatusID() {
			return this.ComplainStatusID;
		}

		public Integer AdministratorID;

		public Integer getAdministratorID() {
			return this.AdministratorID;
		}

		public String ClientSatisfaction;

		public String getClientSatisfaction() {
			return this.ClientSatisfaction;
		}

		public Float ExpectedReimbursement;

		public Float getExpectedReimbursement() {
			return this.ExpectedReimbursement;
		}

		public Integer Handled_By;

		public Integer getHandled_By() {
			return this.Handled_By;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PIB_Fact_Complains.length) {
					if (length < 1024 && commonByteArray_ETL_PIB_Fact_Complains.length == 0) {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[1024];
					} else {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PIB_Fact_Complains, 0, length);
				strReturn = new String(commonByteArray_ETL_PIB_Fact_Complains, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.ComplainDate = readDate(dis);

					this.CompletionDate = readString(dis);

					this.CustomerID = readInteger(dis);

					this.BrokerID = readInteger(dis);

					this.ProductID = readInteger(dis);

					this.ComplainPriorityID = readInteger(dis);

					this.ComplainTypeID = readInteger(dis);

					this.ComplainSourceID = readInteger(dis);

					this.ComplainCategoryID = readInteger(dis);

					this.ComplainStatusID = readInteger(dis);

					this.AdministratorID = readInteger(dis);

					this.ClientSatisfaction = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ExpectedReimbursement = null;
					} else {
						this.ExpectedReimbursement = dis.readFloat();
					}

					this.Handled_By = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// java.util.Date

				writeDate(this.ComplainDate, dos);

				// String

				writeString(this.CompletionDate, dos);

				// Integer

				writeInteger(this.CustomerID, dos);

				// Integer

				writeInteger(this.BrokerID, dos);

				// Integer

				writeInteger(this.ProductID, dos);

				// Integer

				writeInteger(this.ComplainPriorityID, dos);

				// Integer

				writeInteger(this.ComplainTypeID, dos);

				// Integer

				writeInteger(this.ComplainSourceID, dos);

				// Integer

				writeInteger(this.ComplainCategoryID, dos);

				// Integer

				writeInteger(this.ComplainStatusID, dos);

				// Integer

				writeInteger(this.AdministratorID, dos);

				// String

				writeString(this.ClientSatisfaction, dos);

				// Float

				if (this.ExpectedReimbursement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ExpectedReimbursement);
				}

				// Integer

				writeInteger(this.Handled_By, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",ComplainDate=" + String.valueOf(ComplainDate));
			sb.append(",CompletionDate=" + CompletionDate);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",BrokerID=" + String.valueOf(BrokerID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ComplainPriorityID=" + String.valueOf(ComplainPriorityID));
			sb.append(",ComplainTypeID=" + String.valueOf(ComplainTypeID));
			sb.append(",ComplainSourceID=" + String.valueOf(ComplainSourceID));
			sb.append(",ComplainCategoryID=" + String.valueOf(ComplainCategoryID));
			sb.append(",ComplainStatusID=" + String.valueOf(ComplainStatusID));
			sb.append(",AdministratorID=" + String.valueOf(AdministratorID));
			sb.append(",ClientSatisfaction=" + ClientSatisfaction);
			sb.append(",ExpectedReimbursement=" + String.valueOf(ExpectedReimbursement));
			sb.append(",Handled_By=" + String.valueOf(Handled_By));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public java.util.Date ComplainDate;

		public java.util.Date getComplainDate() {
			return this.ComplainDate;
		}

		public String CompletionDate;

		public String getCompletionDate() {
			return this.CompletionDate;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		public Integer BrokerID;

		public Integer getBrokerID() {
			return this.BrokerID;
		}

		public Integer ProductID;

		public Integer getProductID() {
			return this.ProductID;
		}

		public Integer ComplainPriorityID;

		public Integer getComplainPriorityID() {
			return this.ComplainPriorityID;
		}

		public Integer ComplainTypeID;

		public Integer getComplainTypeID() {
			return this.ComplainTypeID;
		}

		public Integer ComplainSourceID;

		public Integer getComplainSourceID() {
			return this.ComplainSourceID;
		}

		public Integer ComplainCategoryID;

		public Integer getComplainCategoryID() {
			return this.ComplainCategoryID;
		}

		public Integer ComplainStatusID;

		public Integer getComplainStatusID() {
			return this.ComplainStatusID;
		}

		public Integer AdministratorID;

		public Integer getAdministratorID() {
			return this.AdministratorID;
		}

		public String ClientSatisfaction;

		public String getClientSatisfaction() {
			return this.ClientSatisfaction;
		}

		public Float ExpectedReimbursement;

		public Float getExpectedReimbursement() {
			return this.ExpectedReimbursement;
		}

		public Integer Handled_By;

		public Integer getHandled_By() {
			return this.Handled_By;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PIB_Fact_Complains.length) {
					if (length < 1024 && commonByteArray_ETL_PIB_Fact_Complains.length == 0) {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[1024];
					} else {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PIB_Fact_Complains, 0, length);
				strReturn = new String(commonByteArray_ETL_PIB_Fact_Complains, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.ComplainDate = readDate(dis);

					this.CompletionDate = readString(dis);

					this.CustomerID = readInteger(dis);

					this.BrokerID = readInteger(dis);

					this.ProductID = readInteger(dis);

					this.ComplainPriorityID = readInteger(dis);

					this.ComplainTypeID = readInteger(dis);

					this.ComplainSourceID = readInteger(dis);

					this.ComplainCategoryID = readInteger(dis);

					this.ComplainStatusID = readInteger(dis);

					this.AdministratorID = readInteger(dis);

					this.ClientSatisfaction = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ExpectedReimbursement = null;
					} else {
						this.ExpectedReimbursement = dis.readFloat();
					}

					this.Handled_By = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// java.util.Date

				writeDate(this.ComplainDate, dos);

				// String

				writeString(this.CompletionDate, dos);

				// Integer

				writeInteger(this.CustomerID, dos);

				// Integer

				writeInteger(this.BrokerID, dos);

				// Integer

				writeInteger(this.ProductID, dos);

				// Integer

				writeInteger(this.ComplainPriorityID, dos);

				// Integer

				writeInteger(this.ComplainTypeID, dos);

				// Integer

				writeInteger(this.ComplainSourceID, dos);

				// Integer

				writeInteger(this.ComplainCategoryID, dos);

				// Integer

				writeInteger(this.ComplainStatusID, dos);

				// Integer

				writeInteger(this.AdministratorID, dos);

				// String

				writeString(this.ClientSatisfaction, dos);

				// Float

				if (this.ExpectedReimbursement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ExpectedReimbursement);
				}

				// Integer

				writeInteger(this.Handled_By, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",ComplainDate=" + String.valueOf(ComplainDate));
			sb.append(",CompletionDate=" + CompletionDate);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",BrokerID=" + String.valueOf(BrokerID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ComplainPriorityID=" + String.valueOf(ComplainPriorityID));
			sb.append(",ComplainTypeID=" + String.valueOf(ComplainTypeID));
			sb.append(",ComplainSourceID=" + String.valueOf(ComplainSourceID));
			sb.append(",ComplainCategoryID=" + String.valueOf(ComplainCategoryID));
			sb.append(",ComplainStatusID=" + String.valueOf(ComplainStatusID));
			sb.append(",AdministratorID=" + String.valueOf(AdministratorID));
			sb.append(",ClientSatisfaction=" + ClientSatisfaction);
			sb.append(",ExpectedReimbursement=" + String.valueOf(ExpectedReimbursement));
			sb.append(",Handled_By=" + String.valueOf(Handled_By));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputExcel_1Struct
			implements routines.system.IPersistableRow<after_tFileInputExcel_1Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];

		public Integer ID;

		public Integer getID() {
			return this.ID;
		}

		public java.util.Date ComplainDate;

		public java.util.Date getComplainDate() {
			return this.ComplainDate;
		}

		public String CompletionDate;

		public String getCompletionDate() {
			return this.CompletionDate;
		}

		public Integer CustomerID;

		public Integer getCustomerID() {
			return this.CustomerID;
		}

		public Integer BrokerID;

		public Integer getBrokerID() {
			return this.BrokerID;
		}

		public Integer ProductID;

		public Integer getProductID() {
			return this.ProductID;
		}

		public Integer ComplainPriorityID;

		public Integer getComplainPriorityID() {
			return this.ComplainPriorityID;
		}

		public Integer ComplainTypeID;

		public Integer getComplainTypeID() {
			return this.ComplainTypeID;
		}

		public Integer ComplainSourceID;

		public Integer getComplainSourceID() {
			return this.ComplainSourceID;
		}

		public Integer ComplainCategoryID;

		public Integer getComplainCategoryID() {
			return this.ComplainCategoryID;
		}

		public Integer ComplainStatusID;

		public Integer getComplainStatusID() {
			return this.ComplainStatusID;
		}

		public Integer AdministratorID;

		public Integer getAdministratorID() {
			return this.AdministratorID;
		}

		public String ClientSatisfaction;

		public String getClientSatisfaction() {
			return this.ClientSatisfaction;
		}

		public Float ExpectedReimbursement;

		public Float getExpectedReimbursement() {
			return this.ExpectedReimbursement;
		}

		public Integer Handled_By;

		public Integer getHandled_By() {
			return this.Handled_By;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_PIB_Fact_Complains.length) {
					if (length < 1024 && commonByteArray_ETL_PIB_Fact_Complains.length == 0) {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[1024];
					} else {
						commonByteArray_ETL_PIB_Fact_Complains = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_PIB_Fact_Complains, 0, length);
				strReturn = new String(commonByteArray_ETL_PIB_Fact_Complains, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.ID = readInteger(dis);

					this.ComplainDate = readDate(dis);

					this.CompletionDate = readString(dis);

					this.CustomerID = readInteger(dis);

					this.BrokerID = readInteger(dis);

					this.ProductID = readInteger(dis);

					this.ComplainPriorityID = readInteger(dis);

					this.ComplainTypeID = readInteger(dis);

					this.ComplainSourceID = readInteger(dis);

					this.ComplainCategoryID = readInteger(dis);

					this.ComplainStatusID = readInteger(dis);

					this.AdministratorID = readInteger(dis);

					this.ClientSatisfaction = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.ExpectedReimbursement = null;
					} else {
						this.ExpectedReimbursement = dis.readFloat();
					}

					this.Handled_By = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.ID, dos);

				// java.util.Date

				writeDate(this.ComplainDate, dos);

				// String

				writeString(this.CompletionDate, dos);

				// Integer

				writeInteger(this.CustomerID, dos);

				// Integer

				writeInteger(this.BrokerID, dos);

				// Integer

				writeInteger(this.ProductID, dos);

				// Integer

				writeInteger(this.ComplainPriorityID, dos);

				// Integer

				writeInteger(this.ComplainTypeID, dos);

				// Integer

				writeInteger(this.ComplainSourceID, dos);

				// Integer

				writeInteger(this.ComplainCategoryID, dos);

				// Integer

				writeInteger(this.ComplainStatusID, dos);

				// Integer

				writeInteger(this.AdministratorID, dos);

				// String

				writeString(this.ClientSatisfaction, dos);

				// Float

				if (this.ExpectedReimbursement == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ExpectedReimbursement);
				}

				// Integer

				writeInteger(this.Handled_By, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ID=" + String.valueOf(ID));
			sb.append(",ComplainDate=" + String.valueOf(ComplainDate));
			sb.append(",CompletionDate=" + CompletionDate);
			sb.append(",CustomerID=" + String.valueOf(CustomerID));
			sb.append(",BrokerID=" + String.valueOf(BrokerID));
			sb.append(",ProductID=" + String.valueOf(ProductID));
			sb.append(",ComplainPriorityID=" + String.valueOf(ComplainPriorityID));
			sb.append(",ComplainTypeID=" + String.valueOf(ComplainTypeID));
			sb.append(",ComplainSourceID=" + String.valueOf(ComplainSourceID));
			sb.append(",ComplainCategoryID=" + String.valueOf(ComplainCategoryID));
			sb.append(",ComplainStatusID=" + String.valueOf(ComplainStatusID));
			sb.append(",AdministratorID=" + String.valueOf(AdministratorID));
			sb.append(",ClientSatisfaction=" + ClientSatisfaction);
			sb.append(",ExpectedReimbursement=" + String.valueOf(ExpectedReimbursement));
			sb.append(",Handled_By=" + String.valueOf(Handled_By));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputExcel_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_2Process(globalMap);
				tDBInput_3Process(globalMap);
				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);
				tDBInput_6Process(globalMap);
				tFileInputExcel_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();
				Fact_ComplainsStruct Fact_Complains = new Fact_ComplainsStruct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Fact_Complains");
				}

				int tos_count_tDBOutput_1 = 0;

				String dbschema_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "public";

				String tableName_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("Fact_Complains");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "\".\"" + ("Fact_Complains");
				}

				int updateKeyCount_tDBOutput_1 = 6;
				if (updateKeyCount_tDBOutput_1 < 1) {
					throw new RuntimeException("For update, Schema must have a key");
				}
				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;

				java.lang.Class.forName("org.postgresql.Driver");

				String url_tDBOutput_1 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "PIB_DW";
				dbUser_tDBOutput_1 = "postgres";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:UCihWuvpcUf+ElwbpKk3WJqS2c+iZY1aIR3h6LRte8g=");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int count_tDBOutput_1 = 0;
				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null, null, null,
						new String[] { "TABLE" })) {
					String defaultSchema_tDBOutput_1 = "public";
					if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
						try (java.sql.Statement stmtSchema_tDBOutput_1 = conn_tDBOutput_1.createStatement();
								java.sql.ResultSet rsSchema_tDBOutput_1 = stmtSchema_tDBOutput_1
										.executeQuery("select current_schema() ")) {
							while (rsSchema_tDBOutput_1.next()) {
								defaultSchema_tDBOutput_1 = rsSchema_tDBOutput_1.getString("current_schema");
							}
						}
					}
					while (rsTable_tDBOutput_1.next()) {
						String table_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_NAME");
						String schema_tDBOutput_1 = rsTable_tDBOutput_1.getString("TABLE_SCHEM");
						if (table_tDBOutput_1.equals(("Fact_Complains"))
								&& (schema_tDBOutput_1.equals(dbschema_tDBOutput_1)
										|| ((dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0)
												&& defaultSchema_tDBOutput_1.equals(schema_tDBOutput_1)))) {
							whetherExist_tDBOutput_1 = true;
							break;
						}
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE \"" + tableName_tDBOutput_1 + "\"");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE \"" + tableName_tDBOutput_1
							+ "\"(\"ID\" INT4 ,\"ComplainDateID\" INT4  not null ,\"CompletionDateID\" INT4  not null ,\"BrokerID\" INT4  not null ,\"CustomerID\" INT4  not null ,\"ProductID\" INT4  not null ,\"ClientSatisfaction\" VARCHAR(3)  ,\"ExpectedReimbursement\" FLOAT4 ,\"Change_Freq\" FLOAT4 ,\"Services_Sat_Rate_On5\" FLOAT4 ,\"Complain_Sat_Rate\" FLOAT4 ,\"Res_Time_Days_Expected\" FLOAT4 ,\"Price_Sat_Rate\" FLOAT4 ,primary key(\"ID\",\"ComplainDateID\",\"CompletionDateID\",\"BrokerID\",\"CustomerID\",\"ProductID\"))");
				}
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement("SELECT COUNT(1) FROM \"" + tableName_tDBOutput_1
								+ "\" WHERE \"ID\" = ? AND \"ComplainDateID\" = ? AND \"CompletionDateID\" = ? AND \"BrokerID\" = ? AND \"CustomerID\" = ? AND \"ProductID\" = ?");
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
				String insert_tDBOutput_1 = "INSERT INTO \"" + tableName_tDBOutput_1
						+ "\" (\"ID\",\"ComplainDateID\",\"CompletionDateID\",\"BrokerID\",\"CustomerID\",\"ProductID\",\"ClientSatisfaction\",\"ExpectedReimbursement\",\"Change_Freq\",\"Services_Sat_Rate_On5\",\"Complain_Sat_Rate\",\"Res_Time_Days_Expected\",\"Price_Sat_Rate\") VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
				String update_tDBOutput_1 = "UPDATE \"" + tableName_tDBOutput_1
						+ "\" SET \"ClientSatisfaction\" = ?,\"ExpectedReimbursement\" = ?,\"Change_Freq\" = ?,\"Services_Sat_Rate_On5\" = ?,\"Complain_Sat_Rate\" = ?,\"Res_Time_Days_Expected\" = ?,\"Price_Sat_Rate\" = ? WHERE \"ID\" = ? AND \"ComplainDateID\" = ? AND \"CompletionDateID\" = ? AND \"BrokerID\" = ? AND \"CustomerID\" = ? AND \"ProductID\" = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1
						.prepareStatement(update_tDBOutput_1);
				resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) globalMap
						.get("tHash_Lookup_row3"));

				row3Struct row3HashKey = new row3Struct();
				row3Struct row3Default = new row3Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) globalMap
						.get("tHash_Lookup_row7"));

				row7Struct row7HashKey = new row7Struct();
				row7Struct row7Default = new row7Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) globalMap
						.get("tHash_Lookup_row8"));

				row8Struct row8HashKey = new row8Struct();
				row8Struct row8Default = new row8Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
					String var1;
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				Fact_ComplainsStruct Fact_Complains_tmp = new Fact_ComplainsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tFileInputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_1", false);
				start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_1";

				int tos_count_tFileInputExcel_1 = 0;

				final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:W+zr/yEN90tLFtwDB3L5xoHlDTowLsi7TkDGAQ==");
				String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
				if (password_tFileInputExcel_1.isEmpty()) {
					password_tFileInputExcel_1 = null;
				}
				class RegexUtil_tFileInputExcel_1 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

				Object source_tFileInputExcel_1 = "D:/PIB/Data/Complains.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

				if (source_tFileInputExcel_1 instanceof String) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_1), password_tFileInputExcel_1);
				} else if (source_tFileInputExcel_1 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_1, password_tFileInputExcel_1);
				} else {
					workbook_tFileInputExcel_1 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1) {
						sheetList_tFileInputExcel_1
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
					}
					if (sheetList_tFileInputExcel_1.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
						if (sheet_FilterNull_tFileInputExcel_1 != null
								&& sheetList_FilterNull_tFileInputExcel_1.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
						}
					}
					sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
					if (sheetList_tFileInputExcel_1.size() > 0) {
						int nb_line_tFileInputExcel_1 = 0;

						int begin_line_tFileInputExcel_1 = 1;

						int footer_input_tFileInputExcel_1 = 0;

						int end_line_tFileInputExcel_1 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
							end_line_tFileInputExcel_1 += (sheet_tFileInputExcel_1.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
						int limit_tFileInputExcel_1 = 13846;
						int start_column_tFileInputExcel_1 = 1 - 1;
						int end_column_tFileInputExcel_1 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
								.get(0);
						int rowCount_tFileInputExcel_1 = 0;
						int sheetIndex_tFileInputExcel_1 = 0;
						int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++) {

							int emptyColumnCount_tFileInputExcel_1 = 0;

							if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
								break;
							}

							while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
								rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
								sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1
										.get(++sheetIndex_tFileInputExcel_1);
								currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_1_CURRENT_SHEET", sheet_tFileInputExcel_1.getSheetName());
							if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
								row_tFileInputExcel_1 = sheet_tFileInputExcel_1
										.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
							}
							row1 = null;
							int tempRowLength_tFileInputExcel_1 = 15;

							int columnIndex_tFileInputExcel_1 = 0;

							String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
							int excel_end_column_tFileInputExcel_1;
							if (row_tFileInputExcel_1 == null) {
								excel_end_column_tFileInputExcel_1 = 0;
							} else {
								excel_end_column_tFileInputExcel_1 = row_tFileInputExcel_1.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_1;
							if (end_column_tFileInputExcel_1 == -1) {
								actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
							} else {
								actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 > excel_end_column_tFileInputExcel_1
										? excel_end_column_tFileInputExcel_1
										: end_column_tFileInputExcel_1;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_1; i++) {
								if (i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1
											.getCell(i + start_column_tFileInputExcel_1);
									if (cell_tFileInputExcel_1 != null) {
										switch (cell_tFileInputExcel_1.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_1)) {
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1
														.format(cell_tFileInputExcel_1.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_1[i] = String
													.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_1)) {
													temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_1.getNumericCellValue());
													temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_1[i] = String
														.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_1[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_1[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_1[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_1[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_1 = false;
							row1 = new row1Struct();
							int curColNum_tFileInputExcel_1 = -1;
							String curColName_tFileInputExcel_1 = "";
							try {
								columnIndex_tFileInputExcel_1 = 0;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ID";

									row1.ID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 1;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ComplainDate";

									if (1 < actual_end_column_tFileInputExcel_1) {
										try {
											if (row_tFileInputExcel_1
													.getCell(columnIndex_tFileInputExcel_1
															+ start_column_tFileInputExcel_1)
													.getCellType() == org.apache.poi.ss.usermodel.CellType.NUMERIC
													&& org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(
															row_tFileInputExcel_1.getCell(columnIndex_tFileInputExcel_1
																	+ start_column_tFileInputExcel_1))) {
												row1.ComplainDate = row_tFileInputExcel_1.getCell(
														columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1)
														.getDateCellValue();
											} else {
												java.util.Date tempDate_tFileInputExcel_1 = ParserUtils.parseTo_Date(
														temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1],
														"dd-MM-yyyy");
												if (tempDate_tFileInputExcel_1
														.after((new SimpleDateFormat("yyyy/MM/dd hh:mm:ss.SSS"))
																.parse("9999/12/31 23:59:59.999"))
														|| tempDate_tFileInputExcel_1
																.before((new SimpleDateFormat("yyyy/MM/dd"))
																		.parse("1900/01/01"))) {
													throw new RuntimeException("The cell format is not Date in ( Row. "
															+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
															+ curColNum_tFileInputExcel_1 + " )");
												} else {
													row1.ComplainDate = tempDate_tFileInputExcel_1;
												}
											}
										} catch (java.lang.Exception e) {

											throw new RuntimeException("The cell format is not Date in ( Row. "
													+ (nb_line_tFileInputExcel_1 + 1) + " and ColumnNum. "
													+ curColNum_tFileInputExcel_1 + " )");
										}
									}

								} else {
									row1.ComplainDate = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 2;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CompletionDate";

									row1.CompletionDate = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.CompletionDate = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 3;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "CustomerID";

									row1.CustomerID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.CustomerID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 4;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "BrokerID";

									row1.BrokerID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.BrokerID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 5;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ProductID";

									row1.ProductID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ProductID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 6;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ComplainPriorityID";

									row1.ComplainPriorityID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ComplainPriorityID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 7;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ComplainTypeID";

									row1.ComplainTypeID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ComplainTypeID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 8;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ComplainSourceID";

									row1.ComplainSourceID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ComplainSourceID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 9;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ComplainCategoryID";

									row1.ComplainCategoryID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ComplainCategoryID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 10;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ComplainStatusID";

									row1.ComplainStatusID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ComplainStatusID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 11;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "AdministratorID";

									row1.AdministratorID = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.AdministratorID = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 12;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ClientSatisfaction";

									row1.ClientSatisfaction = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
								} else {
									row1.ClientSatisfaction = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 13;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "ExpectedReimbursement";

									row1.ExpectedReimbursement = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.ExpectedReimbursement = null;
									emptyColumnCount_tFileInputExcel_1++;
								}
								columnIndex_tFileInputExcel_1 = 14;

								if (temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
									curColNum_tFileInputExcel_1 = columnIndex_tFileInputExcel_1
											+ start_column_tFileInputExcel_1 + 1;
									curColName_tFileInputExcel_1 = "Handled_By";

									row1.Handled_By = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null,
											'.' == decimalChar_tFileInputExcel_1 ? null
													: decimalChar_tFileInputExcel_1));
								} else {
									row1.Handled_By = null;
									emptyColumnCount_tFileInputExcel_1++;
								}

								nb_line_tFileInputExcel_1++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_1 = true;
								System.err.println(e.getMessage());
								row1 = null;
							}

							/**
							 * [tFileInputExcel_1 begin ] stop
							 */

							/**
							 * [tFileInputExcel_1 main ] start
							 */

							currentComponent = "tFileInputExcel_1";

							tos_count_tFileInputExcel_1++;

							/**
							 * [tFileInputExcel_1 main ] stop
							 */

							/**
							 * [tFileInputExcel_1 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_begin ] stop
							 */
// Start of branch "row1"
							if (row1 != null) {

								/**
								 * [tFilterRow_1 main ] start
								 */

								currentComponent = "tFilterRow_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
								}

								row2 = null;
								Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
								ope_tFilterRow_1.matches(
										(row1.CompletionDate == null ? false
												: row1.CompletionDate.toUpperCase().compareTo("NULL") != 0),
										" CompletionDate.toUpperCase().compareTo(\"NULL\") != 0 failed");

								if (ope_tFilterRow_1.getMatchFlag()) {
									if (row2 == null) {
										row2 = new row2Struct();
									}
									row2.ID = row1.ID;
									row2.ComplainDate = row1.ComplainDate;
									row2.CompletionDate = row1.CompletionDate;
									row2.CustomerID = row1.CustomerID;
									row2.BrokerID = row1.BrokerID;
									row2.ProductID = row1.ProductID;
									row2.ComplainPriorityID = row1.ComplainPriorityID;
									row2.ComplainTypeID = row1.ComplainTypeID;
									row2.ComplainSourceID = row1.ComplainSourceID;
									row2.ComplainCategoryID = row1.ComplainCategoryID;
									row2.ComplainStatusID = row1.ComplainStatusID;
									row2.AdministratorID = row1.AdministratorID;
									row2.ClientSatisfaction = row1.ClientSatisfaction;
									row2.ExpectedReimbursement = row1.ExpectedReimbursement;
									row2.Handled_By = row1.Handled_By;
									nb_line_ok_tFilterRow_1++;
								} else {
									nb_line_reject_tFilterRow_1++;
								}

								nb_line_tFilterRow_1++;

								tos_count_tFilterRow_1++;

								/**
								 * [tFilterRow_1 main ] stop
								 */

								/**
								 * [tFilterRow_1 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_begin ] stop
								 */
// Start of branch "row2"
								if (row2 != null) {

									/**
									 * [tMap_1 main ] start
									 */

									currentComponent = "tMap_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_1 = false;
									boolean mainRowRejected_tMap_1 = false;

									///////////////////////////////////////////////
									// Starting Lookup Table "row3"
									///////////////////////////////////////////////

									boolean forceLooprow3 = false;

									row3Struct row3ObjectFromLookup = null;

									if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

										hasCasePrimitiveKeyWithNull_tMap_1 = false;

										Object exprKeyValue_row3__BrokerID = row2.BrokerID;
										if (exprKeyValue_row3__BrokerID == null) {
											hasCasePrimitiveKeyWithNull_tMap_1 = true;
										} else {
											row3HashKey.BrokerID = (int) (Integer) exprKeyValue_row3__BrokerID;
										}

										row3HashKey.hashCodeDirty = true;

										if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

											tHash_Lookup_row3.lookup(row3HashKey);

										} // G_TM_M_091

										if (hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row3.hasNext()) { // G_TM_M_090

											rejectedInnerJoin_tMap_1 = true;

											forceLooprow3 = true;

										} // G_TM_M_090

									} // G_TM_M_020

									else { // G 20 - G 21
										forceLooprow3 = true;
									} // G 21

									row3Struct row3 = null;

									while ((tHash_Lookup_row3 != null && tHash_Lookup_row3.hasNext())
											|| forceLooprow3) { // G_TM_M_043

										// CALL close loop of lookup 'row3'

										row3Struct fromLookup_row3 = null;
										row3 = row3Default;

										if (!forceLooprow3) { // G 46

											fromLookup_row3 = tHash_Lookup_row3.next();

											if (fromLookup_row3 != null) {
												row3 = fromLookup_row3;
											}

										} // G 46

										forceLooprow3 = false;

										///////////////////////////////////////////////
										// Starting Lookup Table "row4"
										///////////////////////////////////////////////

										boolean forceLooprow4 = false;

										row4Struct row4ObjectFromLookup = null;

										if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

											hasCasePrimitiveKeyWithNull_tMap_1 = false;

											Object exprKeyValue_row4__CustomerID = row2.CustomerID;
											if (exprKeyValue_row4__CustomerID == null) {
												hasCasePrimitiveKeyWithNull_tMap_1 = true;
											} else {
												row4HashKey.CustomerID = (int) (Integer) exprKeyValue_row4__CustomerID;
											}

											row4HashKey.hashCodeDirty = true;

											if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

												tHash_Lookup_row4.lookup(row4HashKey);

											} // G_TM_M_091

											if (hasCasePrimitiveKeyWithNull_tMap_1 || !tHash_Lookup_row4.hasNext()) { // G_TM_M_090

												rejectedInnerJoin_tMap_1 = true;

												forceLooprow4 = true;

											} // G_TM_M_090

										} // G_TM_M_020

										else { // G 20 - G 21
											forceLooprow4 = true;
										} // G 21

										row4Struct row4 = null;

										while ((tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext())
												|| forceLooprow4) { // G_TM_M_043

											// CALL close loop of lookup 'row4'

											row4Struct fromLookup_row4 = null;
											row4 = row4Default;

											if (!forceLooprow4) { // G 46

												fromLookup_row4 = tHash_Lookup_row4.next();

												if (fromLookup_row4 != null) {
													row4 = fromLookup_row4;
												}

											} // G 46

											forceLooprow4 = false;

											///////////////////////////////////////////////
											// Starting Lookup Table "row5"
											///////////////////////////////////////////////

											boolean forceLooprow5 = false;

											row5Struct row5ObjectFromLookup = null;

											if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

												hasCasePrimitiveKeyWithNull_tMap_1 = false;

												row5HashKey.date = row2.ComplainDate == null ? null
														: new java.util.Date(row2.ComplainDate.getTime());

												row5HashKey.hashCodeDirty = true;

												tHash_Lookup_row5.lookup(row5HashKey);

												if (!tHash_Lookup_row5.hasNext()) { // G_TM_M_090

													rejectedInnerJoin_tMap_1 = true;

													forceLooprow5 = true;

												} // G_TM_M_090

											} // G_TM_M_020

											else { // G 20 - G 21
												forceLooprow5 = true;
											} // G 21

											row5Struct row5 = null;

											while ((tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext())
													|| forceLooprow5) { // G_TM_M_043

												// CALL close loop of lookup 'row5'

												row5Struct fromLookup_row5 = null;
												row5 = row5Default;

												if (!forceLooprow5) { // G 46

													fromLookup_row5 = tHash_Lookup_row5.next();

													if (fromLookup_row5 != null) {
														row5 = fromLookup_row5;
													}

												} // G 46

												forceLooprow5 = false;

												///////////////////////////////////////////////
												// Starting Lookup Table "row6"
												///////////////////////////////////////////////

												boolean forceLooprow6 = false;

												row6Struct row6ObjectFromLookup = null;

												if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

													hasCasePrimitiveKeyWithNull_tMap_1 = false;

													Object exprKeyValue_row6__ProductID = row2.ProductID;
													if (exprKeyValue_row6__ProductID == null) {
														hasCasePrimitiveKeyWithNull_tMap_1 = true;
													} else {
														row6HashKey.ProductID = (int) (Integer) exprKeyValue_row6__ProductID;
													}

													row6HashKey.hashCodeDirty = true;

													if (!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091

														tHash_Lookup_row6.lookup(row6HashKey);

													} // G_TM_M_091

													if (hasCasePrimitiveKeyWithNull_tMap_1
															|| !tHash_Lookup_row6.hasNext()) { // G_TM_M_090

														rejectedInnerJoin_tMap_1 = true;

														forceLooprow6 = true;

													} // G_TM_M_090

												} // G_TM_M_020

												else { // G 20 - G 21
													forceLooprow6 = true;
												} // G 21

												row6Struct row6 = null;

												while ((tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext())
														|| forceLooprow6) { // G_TM_M_043

													// CALL close loop of lookup 'row6'

													row6Struct fromLookup_row6 = null;
													row6 = row6Default;

													if (!forceLooprow6) { // G 46

														fromLookup_row6 = tHash_Lookup_row6.next();

														if (fromLookup_row6 != null) {
															row6 = fromLookup_row6;
														}

													} // G 46

													forceLooprow6 = false;

													///////////////////////////////////////////////
													// Starting Lookup Table "row7"
													///////////////////////////////////////////////

													boolean forceLooprow7 = false;

													row7Struct row7ObjectFromLookup = null;

													if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

														hasCasePrimitiveKeyWithNull_tMap_1 = false;

														row7HashKey.date = TalendDate.parseDate(
																"E MMM d HH:mm:ss zzz yyyy",
																row2.CompletionDate) == null
																		? null
																		: new java.util.Date(TalendDate
																				.parseDate("E MMM d HH:mm:ss zzz yyyy",
																						row2.CompletionDate)
																				.getTime());

														row7HashKey.hashCodeDirty = true;

														tHash_Lookup_row7.lookup(row7HashKey);

														if (!tHash_Lookup_row7.hasNext()) { // G_TM_M_090

															rejectedInnerJoin_tMap_1 = true;

														} // G_TM_M_090

													} // G_TM_M_020

													if (tHash_Lookup_row7 != null
															&& tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071

														// System.out.println("WARNING: UNIQUE MATCH is configured for
														// the lookup 'row7' and it contains more one result from keys :
														// row7.date = '" + row7HashKey.date + "'");
													} // G 071

													row7Struct row7 = null;

													row7Struct fromLookup_row7 = null;
													row7 = row7Default;

													if (tHash_Lookup_row7 != null && tHash_Lookup_row7.hasNext()) { // G
																													// 099

														fromLookup_row7 = tHash_Lookup_row7.next();

													} // G 099

													if (fromLookup_row7 != null) {
														row7 = fromLookup_row7;
													}

													///////////////////////////////////////////////
													// Starting Lookup Table "row8"
													///////////////////////////////////////////////

													boolean forceLooprow8 = false;

													row8Struct row8ObjectFromLookup = null;

													if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

														hasCasePrimitiveKeyWithNull_tMap_1 = false;

														row8HashKey.Profile_Code = row4.ProfileID;

														row8HashKey.hashCodeDirty = true;

														tHash_Lookup_row8.lookup(row8HashKey);

														if (!tHash_Lookup_row8.hasNext()) { // G_TM_M_090

															rejectedInnerJoin_tMap_1 = true;

															forceLooprow8 = true;

														} // G_TM_M_090

													} // G_TM_M_020

													else { // G 20 - G 21
														forceLooprow8 = true;
													} // G 21

													row8Struct row8 = null;

													while ((tHash_Lookup_row8 != null && tHash_Lookup_row8.hasNext())
															|| forceLooprow8) { // G_TM_M_043

														// CALL close loop of lookup 'row8'

														row8Struct fromLookup_row8 = null;
														row8 = row8Default;

														if (!forceLooprow8) { // G 46

															fromLookup_row8 = tHash_Lookup_row8.next();

															if (fromLookup_row8 != null) {
																row8 = fromLookup_row8;
															}

														} // G 46

														forceLooprow8 = false;

														// ###############################
														{ // start of Var scope

															// ###############################
															// # Vars tables

															Var__tMap_1__Struct Var = Var__tMap_1;
															Var.var1 = null;// ###############################
															// ###############################
															// # Output tables

															Fact_Complains = null;

															if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'Fact_Complains'
																Fact_Complains_tmp.ID = row2.ID;
																Fact_Complains_tmp.ComplainDateID = row5.DateID;
																Fact_Complains_tmp.CompletionDateID = row7.DateID;
																Fact_Complains_tmp.BrokerID = row3.BrokerID;
																Fact_Complains_tmp.CustomerID = row4.CustomerID;
																Fact_Complains_tmp.ProductID = row6.ProductID;
																Fact_Complains_tmp.ClientSatisfaction = row2.ClientSatisfaction;
																Fact_Complains_tmp.ExpectedReimbursement = row2.ExpectedReimbursement;
																Fact_Complains_tmp.Change_Freq = row8.Change_Freq;
																Fact_Complains_tmp.Services_Sat_Rate_On5 = row8.Services_Sat_Rate_On5;
																Fact_Complains_tmp.Complain_Sat_Rate = row8.Complain_Sat_Rate;
																Fact_Complains_tmp.Res_Time_Days_Expected = row8.Res_Time_Days_Expected;
																Fact_Complains_tmp.Price_Sat_Rate = row8.Price_Sat_Rate;
																Fact_Complains = Fact_Complains_tmp;
															} // closing inner join bracket (2)
// ###############################

														} // end of Var scope

														rejectedInnerJoin_tMap_1 = false;

														tos_count_tMap_1++;

														/**
														 * [tMap_1 main ] stop
														 */

														/**
														 * [tMap_1 process_data_begin ] start
														 */

														currentComponent = "tMap_1";

														/**
														 * [tMap_1 process_data_begin ] stop
														 */
// Start of branch "Fact_Complains"
														if (Fact_Complains != null) {

															/**
															 * [tDBOutput_1 main ] start
															 */

															currentComponent = "tDBOutput_1";

															if (execStat) {
																runStat.updateStatOnConnection(iterateId, 1, 1,
																		"Fact_Complains");
															}

															whetherReject_tDBOutput_1 = false;
															if (Fact_Complains.ID == null) {
																pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
															} else {
																pstmt_tDBOutput_1.setInt(1, Fact_Complains.ID);
															}

															pstmt_tDBOutput_1.setInt(2, Fact_Complains.ComplainDateID);

															pstmt_tDBOutput_1.setInt(3,
																	Fact_Complains.CompletionDateID);

															pstmt_tDBOutput_1.setInt(4, Fact_Complains.BrokerID);

															pstmt_tDBOutput_1.setInt(5, Fact_Complains.CustomerID);

															pstmt_tDBOutput_1.setInt(6, Fact_Complains.ProductID);

															int checkCount_tDBOutput_1 = -1;
															try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1
																	.executeQuery()) {
																while (rs_tDBOutput_1.next()) {
																	checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
																}
															}
															if (checkCount_tDBOutput_1 > 0) {
																if (Fact_Complains.ClientSatisfaction == null) {
																	pstmtUpdate_tDBOutput_1.setNull(1,
																			java.sql.Types.VARCHAR);
																} else {
																	pstmtUpdate_tDBOutput_1.setString(1,
																			Fact_Complains.ClientSatisfaction);
																}

																if (Fact_Complains.ExpectedReimbursement == null) {
																	pstmtUpdate_tDBOutput_1.setNull(2,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtUpdate_tDBOutput_1.setFloat(2,
																			Fact_Complains.ExpectedReimbursement);
																}

																if (Fact_Complains.Change_Freq == null) {
																	pstmtUpdate_tDBOutput_1.setNull(3,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtUpdate_tDBOutput_1.setFloat(3,
																			Fact_Complains.Change_Freq);
																}

																if (Fact_Complains.Services_Sat_Rate_On5 == null) {
																	pstmtUpdate_tDBOutput_1.setNull(4,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtUpdate_tDBOutput_1.setFloat(4,
																			Fact_Complains.Services_Sat_Rate_On5);
																}

																if (Fact_Complains.Complain_Sat_Rate == null) {
																	pstmtUpdate_tDBOutput_1.setNull(5,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtUpdate_tDBOutput_1.setFloat(5,
																			Fact_Complains.Complain_Sat_Rate);
																}

																if (Fact_Complains.Res_Time_Days_Expected == null) {
																	pstmtUpdate_tDBOutput_1.setNull(6,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtUpdate_tDBOutput_1.setFloat(6,
																			Fact_Complains.Res_Time_Days_Expected);
																}

																if (Fact_Complains.Price_Sat_Rate == null) {
																	pstmtUpdate_tDBOutput_1.setNull(7,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtUpdate_tDBOutput_1.setFloat(7,
																			Fact_Complains.Price_Sat_Rate);
																}

																if (Fact_Complains.ID == null) {
																	pstmtUpdate_tDBOutput_1.setNull(
																			8 + count_tDBOutput_1,
																			java.sql.Types.INTEGER);
																} else {
																	pstmtUpdate_tDBOutput_1.setInt(
																			8 + count_tDBOutput_1, Fact_Complains.ID);
																}

																pstmtUpdate_tDBOutput_1.setInt(9 + count_tDBOutput_1,
																		Fact_Complains.ComplainDateID);

																pstmtUpdate_tDBOutput_1.setInt(10 + count_tDBOutput_1,
																		Fact_Complains.CompletionDateID);

																pstmtUpdate_tDBOutput_1.setInt(11 + count_tDBOutput_1,
																		Fact_Complains.BrokerID);

																pstmtUpdate_tDBOutput_1.setInt(12 + count_tDBOutput_1,
																		Fact_Complains.CustomerID);

																pstmtUpdate_tDBOutput_1.setInt(13 + count_tDBOutput_1,
																		Fact_Complains.ProductID);

																try {

																	updatedCount_tDBOutput_1 = updatedCount_tDBOutput_1
																			+ pstmtUpdate_tDBOutput_1.executeUpdate();
																	nb_line_tDBOutput_1++;

																} catch (java.lang.Exception e) {

																	whetherReject_tDBOutput_1 = true;
																	nb_line_tDBOutput_1++;
																	System.err.print(e.getMessage());
																}
															} else {
																if (Fact_Complains.ID == null) {
																	pstmtInsert_tDBOutput_1.setNull(1,
																			java.sql.Types.INTEGER);
																} else {
																	pstmtInsert_tDBOutput_1.setInt(1,
																			Fact_Complains.ID);
																}

																pstmtInsert_tDBOutput_1.setInt(2,
																		Fact_Complains.ComplainDateID);

																pstmtInsert_tDBOutput_1.setInt(3,
																		Fact_Complains.CompletionDateID);

																pstmtInsert_tDBOutput_1.setInt(4,
																		Fact_Complains.BrokerID);

																pstmtInsert_tDBOutput_1.setInt(5,
																		Fact_Complains.CustomerID);

																pstmtInsert_tDBOutput_1.setInt(6,
																		Fact_Complains.ProductID);

																if (Fact_Complains.ClientSatisfaction == null) {
																	pstmtInsert_tDBOutput_1.setNull(7,
																			java.sql.Types.VARCHAR);
																} else {
																	pstmtInsert_tDBOutput_1.setString(7,
																			Fact_Complains.ClientSatisfaction);
																}

																if (Fact_Complains.ExpectedReimbursement == null) {
																	pstmtInsert_tDBOutput_1.setNull(8,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtInsert_tDBOutput_1.setFloat(8,
																			Fact_Complains.ExpectedReimbursement);
																}

																if (Fact_Complains.Change_Freq == null) {
																	pstmtInsert_tDBOutput_1.setNull(9,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtInsert_tDBOutput_1.setFloat(9,
																			Fact_Complains.Change_Freq);
																}

																if (Fact_Complains.Services_Sat_Rate_On5 == null) {
																	pstmtInsert_tDBOutput_1.setNull(10,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtInsert_tDBOutput_1.setFloat(10,
																			Fact_Complains.Services_Sat_Rate_On5);
																}

																if (Fact_Complains.Complain_Sat_Rate == null) {
																	pstmtInsert_tDBOutput_1.setNull(11,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtInsert_tDBOutput_1.setFloat(11,
																			Fact_Complains.Complain_Sat_Rate);
																}

																if (Fact_Complains.Res_Time_Days_Expected == null) {
																	pstmtInsert_tDBOutput_1.setNull(12,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtInsert_tDBOutput_1.setFloat(12,
																			Fact_Complains.Res_Time_Days_Expected);
																}

																if (Fact_Complains.Price_Sat_Rate == null) {
																	pstmtInsert_tDBOutput_1.setNull(13,
																			java.sql.Types.FLOAT);
																} else {
																	pstmtInsert_tDBOutput_1.setFloat(13,
																			Fact_Complains.Price_Sat_Rate);
																}

																try {

																	insertedCount_tDBOutput_1 = insertedCount_tDBOutput_1
																			+ pstmtInsert_tDBOutput_1.executeUpdate();
																	nb_line_tDBOutput_1++;

																} catch (java.lang.Exception e) {

																	whetherReject_tDBOutput_1 = true;
																	nb_line_tDBOutput_1++;
																	System.err.print(e.getMessage());
																}
															}
															commitCounter_tDBOutput_1++;
															if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
																conn_tDBOutput_1.commit();

																commitCounter_tDBOutput_1 = 0;
															}

															tos_count_tDBOutput_1++;

															/**
															 * [tDBOutput_1 main ] stop
															 */

															/**
															 * [tDBOutput_1 process_data_begin ] start
															 */

															currentComponent = "tDBOutput_1";

															/**
															 * [tDBOutput_1 process_data_begin ] stop
															 */

															/**
															 * [tDBOutput_1 process_data_end ] start
															 */

															currentComponent = "tDBOutput_1";

															/**
															 * [tDBOutput_1 process_data_end ] stop
															 */

														} // End of branch "Fact_Complains"

													} // close loop of lookup 'row8' // G_TM_M_043

												} // close loop of lookup 'row6' // G_TM_M_043

											} // close loop of lookup 'row5' // G_TM_M_043

										} // close loop of lookup 'row4' // G_TM_M_043

									} // close loop of lookup 'row3' // G_TM_M_043

									/**
									 * [tMap_1 process_data_end ] start
									 */

									currentComponent = "tMap_1";

									/**
									 * [tMap_1 process_data_end ] stop
									 */

								} // End of branch "row2"

								/**
								 * [tFilterRow_1 process_data_end ] start
								 */

								currentComponent = "tFilterRow_1";

								/**
								 * [tFilterRow_1 process_data_end ] stop
								 */

							} // End of branch "row1"

							/**
							 * [tFileInputExcel_1 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_1";

							/**
							 * [tFileInputExcel_1 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_1 end ] start
							 */

							currentComponent = "tFileInputExcel_1";

						}

						globalMap.put("tFileInputExcel_1_NB_LINE", nb_line_tFileInputExcel_1);

					}

				} finally {

					if (!(source_tFileInputExcel_1 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_1.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_1", true);
				end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row3 != null) {
					tHash_Lookup_row3.endGet();
				}
				globalMap.remove("tHash_Lookup_row3");

				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row7 != null) {
					tHash_Lookup_row7.endGet();
				}
				globalMap.remove("tHash_Lookup_row7");

				if (tHash_Lookup_row8 != null) {
					tHash_Lookup_row8.endGet();
				}
				globalMap.remove("tHash_Lookup_row8");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (pstmtUpdate_tDBOutput_1 != null) {
					pstmtUpdate_tDBOutput_1.close();
					resourceMap.remove("pstmtUpdate_tDBOutput_1");
				}
				if (pstmtInsert_tDBOutput_1 != null) {
					pstmtInsert_tDBOutput_1.close();
					resourceMap.remove("pstmtInsert_tDBOutput_1");
				}
				if (pstmt_tDBOutput_1 != null) {
					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");
				}
				resourceMap.put("statementClosed_tDBOutput_1", true);

				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Fact_Complains");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row3");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row7");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row8");

			try {

				/**
				 * [tFileInputExcel_1 finally ] start
				 */

				currentComponent = "tFileInputExcel_1";

				/**
				 * [tFileInputExcel_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
						if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtUpdate_tDBOutput_1")) != null) {
							pstmtUpdateToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
						if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmtInsert_tDBOutput_1")) != null) {
							pstmtInsertToClose_tDBOutput_1.close();
						}
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}

	public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int BrokerID;

		public int getBrokerID() {
			return this.BrokerID;
		}

		public String BrokerCode;

		public String getBrokerCode() {
			return this.BrokerCode;
		}

		public String BrokerFullName;

		public String getBrokerFullName() {
			return this.BrokerFullName;
		}

		public String DistributionNetwork;

		public String getDistributionNetwork() {
			return this.DistributionNetwork;
		}

		public String DistributionChannel;

		public String getDistributionChannel() {
			return this.DistributionChannel;
		}

		public String Comm_ref;

		public String getComm_ref() {
			return this.Comm_ref;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.BrokerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row3Struct other = (row3Struct) obj;

			if (this.BrokerID != other.BrokerID)
				return false;

			return true;
		}

		public void copyDataTo(row3Struct other) {

			other.BrokerID = this.BrokerID;
			other.BrokerCode = this.BrokerCode;
			other.BrokerFullName = this.BrokerFullName;
			other.DistributionNetwork = this.DistributionNetwork;
			other.DistributionChannel = this.DistributionChannel;
			other.Comm_ref = this.Comm_ref;

		}

		public void copyKeysDataTo(row3Struct other) {

			other.BrokerID = this.BrokerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.BrokerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.BrokerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.BrokerCode = readString(dis, ois);

				this.BrokerFullName = readString(dis, ois);

				this.DistributionNetwork = readString(dis, ois);

				this.DistributionChannel = readString(dis, ois);

				this.Comm_ref = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.BrokerCode, dos, oos);

				writeString(this.BrokerFullName, dos, oos);

				writeString(this.DistributionNetwork, dos, oos);

				writeString(this.DistributionChannel, dos, oos);

				writeString(this.Comm_ref, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("BrokerID=" + String.valueOf(BrokerID));
			sb.append(",BrokerCode=" + BrokerCode);
			sb.append(",BrokerFullName=" + BrokerFullName);
			sb.append(",DistributionNetwork=" + DistributionNetwork);
			sb.append(",DistributionChannel=" + DistributionChannel);
			sb.append(",Comm_ref=" + Comm_ref);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.BrokerID, other.BrokerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();

				/**
				 * [tAdvancedHash_row3 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row3", false);
				start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tAdvancedHash_row3 = 0;

				// connection name:row3
				// source node:tDBInput_2 - inputs:(after_tFileInputExcel_1) outputs:(row3,row3)
				// | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4,row5,row6,row7,row8)
				// outputs:(Fact_Complains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row3Struct>getLookup(matchingModeEnum_row3);

				globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);

				/**
				 * [tAdvancedHash_row3 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "postgres";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:JJhrCKKun+SWsp6USMER8mLz43UsNaQQHAibKjmTkV8=");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String url_tDBInput_2 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "PIB_DW";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				conn_tDBInput_2.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "SELECT \n  \"PIB_DW\".\"public\".\"Dim_Brokers\".\"BrokerID\", \n  \"PIB_DW\".\"public\".\"Dim_Brokers\".\"BrokerCode\", "
						+ "\n  \"PIB_DW\".\"public\".\"Dim_Brokers\".\"BrokerFullName\", \n  \"PIB_DW\".\"public\".\"Dim_Brokers\".\"DistributionNetw"
						+ "ork\", \n  \"PIB_DW\".\"public\".\"Dim_Brokers\".\"DistributionChannel\", \n  \"PIB_DW\".\"public\".\"Dim_Brokers\".\"Comm"
						+ "_ref\"\nFROM \"PIB_DW\".\"public\".\"Dim_Brokers\"";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.BrokerID = 0;
						} else {

							row3.BrokerID = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.BrokerCode = null;
						} else {

							row3.BrokerCode = routines.system.JDBCUtil.getString(rs_tDBInput_2, 2, false);
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.BrokerFullName = null;
						} else {

							row3.BrokerFullName = routines.system.JDBCUtil.getString(rs_tDBInput_2, 3, false);
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.DistributionNetwork = null;
						} else {

							row3.DistributionNetwork = routines.system.JDBCUtil.getString(rs_tDBInput_2, 4, false);
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.DistributionChannel = null;
						} else {

							row3.DistributionChannel = routines.system.JDBCUtil.getString(rs_tDBInput_2, 5, false);
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.Comm_ref = null;
						} else {

							row3.Comm_ref = routines.system.JDBCUtil.getString(rs_tDBInput_2, 6, false);
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 main ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						row3Struct row3_HashRow = new row3Struct();

						row3_HashRow.BrokerID = row3.BrokerID;

						row3_HashRow.BrokerCode = row3.BrokerCode;

						row3_HashRow.BrokerFullName = row3.BrokerFullName;

						row3_HashRow.DistributionNetwork = row3.DistributionNetwork;

						row3_HashRow.DistributionChannel = row3.DistributionChannel;

						row3_HashRow.Comm_ref = row3.Comm_ref;

						tHash_Lookup_row3.put(row3_HashRow);

						tos_count_tAdvancedHash_row3++;

						/**
						 * [tAdvancedHash_row3 main ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row3 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row3";

						/**
						 * [tAdvancedHash_row3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.commit();

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row3 end ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				tHash_Lookup_row3.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tAdvancedHash_row3", true);
				end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row3 finally ] start
				 */

				currentComponent = "tAdvancedHash_row3";

				/**
				 * [tAdvancedHash_row3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int CustomerID;

		public int getCustomerID() {
			return this.CustomerID;
		}

		public String LastName;

		public String getLastName() {
			return this.LastName;
		}

		public String FirstName;

		public String getFirstName() {
			return this.FirstName;
		}

		public java.util.Date BirthDate;

		public java.util.Date getBirthDate() {
			return this.BirthDate;
		}

		public int RegiondID;

		public int getRegiondID() {
			return this.RegiondID;
		}

		public int ProfileID;

		public int getProfileID() {
			return this.ProfileID;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CustomerID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.CustomerID != other.CustomerID)
				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.CustomerID = this.CustomerID;
			other.LastName = this.LastName;
			other.FirstName = this.FirstName;
			other.BirthDate = this.BirthDate;
			other.RegiondID = this.RegiondID;
			other.ProfileID = this.ProfileID;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.CustomerID = this.CustomerID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.CustomerID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CustomerID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.LastName = readString(dis, ois);

				this.FirstName = readString(dis, ois);

				this.BirthDate = readDate(dis, ois);

				this.RegiondID = dis.readInt();

				this.ProfileID = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.LastName, dos, oos);

				writeString(this.FirstName, dos, oos);

				writeDate(this.BirthDate, dos, oos);

				dos.writeInt(this.RegiondID);

				dos.writeInt(this.ProfileID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CustomerID=" + String.valueOf(CustomerID));
			sb.append(",LastName=" + LastName);
			sb.append(",FirstName=" + FirstName);
			sb.append(",BirthDate=" + String.valueOf(BirthDate));
			sb.append(",RegiondID=" + String.valueOf(RegiondID));
			sb.append(",ProfileID=" + String.valueOf(ProfileID));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_3 - inputs:(after_tFileInputExcel_1) outputs:(row4,row4)
				// | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4,row5,row6,row7,row8)
				// outputs:(Fact_Complains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "postgres";

				final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:8VYIWlKkc8kOfdwMH6kKDqPEvXxOSunm8wQIEpVtTQ0=");

				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;

				String url_tDBInput_3 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "PIB_DW";

				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3, dbUser_tDBInput_3,
						dbPwd_tDBInput_3);

				conn_tDBInput_3.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "SELECT \n  \"PIB_DW\".\"public\".\"Dim_Customers\".\"CustomerID\", \n  \"PIB_DW\".\"public\".\"Dim_Customers\".\"LastName"
						+ "\", \n  \"PIB_DW\".\"public\".\"Dim_Customers\".\"FirstName\", \n  \"PIB_DW\".\"public\".\"Dim_Customers\".\"BirthDate\", "
						+ "\n  \"PIB_DW\".\"public\".\"Dim_Customers\".\"RegiondID\", \n  \"PIB_DW\".\"public\".\"Dim_Customers\".\"ProfileID\"\nFROM "
						+ "\"PIB_DW\".\"public\".\"Dim_Customers\"";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row4.CustomerID = 0;
						} else {

							row4.CustomerID = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row4.LastName = null;
						} else {

							row4.LastName = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, false);
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row4.FirstName = null;
						} else {

							row4.FirstName = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, false);
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row4.BirthDate = null;
						} else {

							row4.BirthDate = routines.system.JDBCUtil.getDate(rs_tDBInput_3, 4);
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row4.RegiondID = 0;
						} else {

							row4.RegiondID = rs_tDBInput_3.getInt(5);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row4.ProfileID = 0;
						} else {

							row4.ProfileID = rs_tDBInput_3.getInt(6);
							if (rs_tDBInput_3.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.CustomerID = row4.CustomerID;

						row4_HashRow.LastName = row4.LastName;

						row4_HashRow.FirstName = row4.FirstName;

						row4_HashRow.BirthDate = row4.BirthDate;

						row4_HashRow.RegiondID = row4.RegiondID;

						row4_HashRow.ProfileID = row4.ProfileID;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
					if (conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {

						conn_tDBInput_3.commit();

						conn_tDBInput_3.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int DateID;

		public int getDateID() {
			return this.DateID;
		}

		public int code_Date;

		public int getCode_Date() {
			return this.code_Date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public int day;

		public int getDay() {
			return this.day;
		}

		public String day_month_year;

		public String getDay_month_year() {
			return this.day_month_year;
		}

		public String lib_day;

		public String getLib_day() {
			return this.lib_day;
		}

		public String lib_month;

		public String getLib_month() {
			return this.lib_month;
		}

		public String day_month_letter;

		public String getDay_month_letter() {
			return this.day_month_letter;
		}

		public int day_of_year;

		public int getDay_of_year() {
			return this.day_of_year;
		}

		public int week_of_month;

		public int getWeek_of_month() {
			return this.week_of_month;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.date == null) {
				if (other.date != null)
					return false;

			} else if (!this.date.equals(other.date))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.DateID = this.DateID;
			other.code_Date = this.code_Date;
			other.date = this.date;
			other.year = this.year;
			other.month = this.month;
			other.day = this.day;
			other.day_month_year = this.day_month_year;
			other.lib_day = this.lib_day;
			other.lib_month = this.lib_month;
			other.day_month_letter = this.day_month_letter;
			other.day_of_year = this.day_of_year;
			other.week_of_month = this.week_of_month;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.date = this.date;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DateID = dis.readInt();

				this.code_Date = dis.readInt();

				this.year = dis.readInt();

				this.month = dis.readInt();

				this.day = dis.readInt();

				this.day_month_year = readString(dis, ois);

				this.lib_day = readString(dis, ois);

				this.lib_month = readString(dis, ois);

				this.day_month_letter = readString(dis, ois);

				this.day_of_year = dis.readInt();

				this.week_of_month = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.DateID);

				dos.writeInt(this.code_Date);

				dos.writeInt(this.year);

				dos.writeInt(this.month);

				dos.writeInt(this.day);

				writeString(this.day_month_year, dos, oos);

				writeString(this.lib_day, dos, oos);

				writeString(this.lib_month, dos, oos);

				writeString(this.day_month_letter, dos, oos);

				dos.writeInt(this.day_of_year);

				dos.writeInt(this.week_of_month);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DateID=" + String.valueOf(DateID));
			sb.append(",code_Date=" + String.valueOf(code_Date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",day=" + String.valueOf(day));
			sb.append(",day_month_year=" + day_month_year);
			sb.append(",lib_day=" + lib_day);
			sb.append(",lib_month=" + lib_month);
			sb.append(",day_month_letter=" + day_month_letter);
			sb.append(",day_of_year=" + String.valueOf(day_of_year));
			sb.append(",week_of_month=" + String.valueOf(week_of_month));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.date, other.date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_4 - inputs:(after_tFileInputExcel_1) outputs:(row5,row5)
				// | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4,row5,row6,row7,row8)
				// outputs:(Fact_Complains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "postgres";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:h2hJE3Cml1Eq5M0P+xbrJcLZyhBAZRMO0xaRwJUyheM=");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String url_tDBInput_4 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "PIB_DW";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				conn_tDBInput_4.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"DateID\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"code_Date\", \n  \"PIB_"
						+ "DW\".\"public\".\"Dim_Date\".\"date\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"year\", \n  \"PIB_DW\".\"public\".\"Dim_Da"
						+ "te\".\"month\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"day\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"day_month_year\","
						+ " \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"lib_day\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"lib_month\", \n  \"PIB_DW\"."
						+ "\"public\".\"Dim_Date\".\"day_month_letter\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"day_of_year\", \n  \"PIB_DW\".\"pub"
						+ "lic\".\"Dim_Date\".\"week_of_month\"\nFROM \"PIB_DW\".\"public\".\"Dim_Date\"";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row5.DateID = 0;
						} else {

							row5.DateID = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row5.code_Date = 0;
						} else {

							row5.code_Date = rs_tDBInput_4.getInt(2);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row5.date = null;
						} else {

							row5.date = routines.system.JDBCUtil.getDate(rs_tDBInput_4, 3);
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row5.year = 0;
						} else {

							row5.year = rs_tDBInput_4.getInt(4);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row5.month = 0;
						} else {

							row5.month = rs_tDBInput_4.getInt(5);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row5.day = 0;
						} else {

							row5.day = rs_tDBInput_4.getInt(6);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row5.day_month_year = null;
						} else {

							row5.day_month_year = routines.system.JDBCUtil.getString(rs_tDBInput_4, 7, false);
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row5.lib_day = null;
						} else {

							row5.lib_day = routines.system.JDBCUtil.getString(rs_tDBInput_4, 8, false);
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row5.lib_month = null;
						} else {

							row5.lib_month = routines.system.JDBCUtil.getString(rs_tDBInput_4, 9, false);
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row5.day_month_letter = null;
						} else {

							row5.day_month_letter = routines.system.JDBCUtil.getString(rs_tDBInput_4, 10, false);
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row5.day_of_year = 0;
						} else {

							row5.day_of_year = rs_tDBInput_4.getInt(11);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row5.week_of_month = 0;
						} else {

							row5.week_of_month = rs_tDBInput_4.getInt(12);
							if (rs_tDBInput_4.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.DateID = row5.DateID;

						row5_HashRow.code_Date = row5.code_Date;

						row5_HashRow.date = row5.date;

						row5_HashRow.year = row5.year;

						row5_HashRow.month = row5.month;

						row5_HashRow.day = row5.day;

						row5_HashRow.day_month_year = row5.day_month_year;

						row5_HashRow.lib_day = row5.lib_day;

						row5_HashRow.lib_month = row5.lib_month;

						row5_HashRow.day_month_letter = row5.day_month_letter;

						row5_HashRow.day_of_year = row5.day_of_year;

						row5_HashRow.week_of_month = row5.week_of_month;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.commit();

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ProductID;

		public int getProductID() {
			return this.ProductID;
		}

		public String ProductCode;

		public String getProductCode() {
			return this.ProductCode;
		}

		public String ProductCategory;

		public String getProductCategory() {
			return this.ProductCategory;
		}

		public String ProductSubCategory;

		public String getProductSubCategory() {
			return this.ProductSubCategory;
		}

		public int Claim_id;

		public int getClaim_id() {
			return this.Claim_id;
		}

		public Integer Ref_Product;

		public Integer getRef_Product() {
			return this.Ref_Product;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.ProductID;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.ProductID != other.ProductID)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.ProductID = this.ProductID;
			other.ProductCode = this.ProductCode;
			other.ProductCategory = this.ProductCategory;
			other.ProductSubCategory = this.ProductSubCategory;
			other.Claim_id = this.Claim_id;
			other.Ref_Product = this.Ref_Product;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.ProductID = this.ProductID;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.ProductID = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.ProductID);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ProductCode = readString(dis, ois);

				this.ProductCategory = readString(dis, ois);

				this.ProductSubCategory = readString(dis, ois);

				this.Claim_id = dis.readInt();

				this.Ref_Product = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.ProductCode, dos, oos);

				writeString(this.ProductCategory, dos, oos);

				writeString(this.ProductSubCategory, dos, oos);

				dos.writeInt(this.Claim_id);

				writeInteger(this.Ref_Product, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ProductID=" + String.valueOf(ProductID));
			sb.append(",ProductCode=" + ProductCode);
			sb.append(",ProductCategory=" + ProductCategory);
			sb.append(",ProductSubCategory=" + ProductSubCategory);
			sb.append(",Claim_id=" + String.valueOf(Claim_id));
			sb.append(",Ref_Product=" + String.valueOf(Ref_Product));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tDBInput_5 - inputs:(after_tFileInputExcel_1) outputs:(row6,row6)
				// | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4,row5,row6,row7,row8)
				// outputs:(Fact_Complains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "postgres";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Np2H0ewdZcaqFd1xto/xMhaKBhz+Oy8lHX77bOXMeZs=");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String url_tDBInput_5 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "PIB_DW";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				conn_tDBInput_5.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT \n  \"PIB_DW\".\"public\".\"Dim_Products\".\"ProductID\", \n  \"PIB_DW\".\"public\".\"Dim_Products\".\"ProductCode"
						+ "\", \n  \"PIB_DW\".\"public\".\"Dim_Products\".\"ProductCategory\", \n  \"PIB_DW\".\"public\".\"Dim_Products\".\"ProductSu"
						+ "bCategory\", \n  \"PIB_DW\".\"public\".\"Dim_Products\".\"Claim_id\", \n  \"PIB_DW\".\"public\".\"Dim_Products\".\"Ref_Pro"
						+ "duct\"\nFROM \"PIB_DW\".\"public\".\"Dim_Products\"";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row6.ProductID = 0;
						} else {

							row6.ProductID = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row6.ProductCode = null;
						} else {

							row6.ProductCode = routines.system.JDBCUtil.getString(rs_tDBInput_5, 2, false);
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row6.ProductCategory = null;
						} else {

							row6.ProductCategory = routines.system.JDBCUtil.getString(rs_tDBInput_5, 3, false);
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row6.ProductSubCategory = null;
						} else {

							row6.ProductSubCategory = routines.system.JDBCUtil.getString(rs_tDBInput_5, 4, false);
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row6.Claim_id = 0;
						} else {

							row6.Claim_id = rs_tDBInput_5.getInt(5);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row6.Ref_Product = null;
						} else {

							row6.Ref_Product = rs_tDBInput_5.getInt(6);
							if (rs_tDBInput_5.wasNull()) {
								row6.Ref_Product = null;
							}
						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.ProductID = row6.ProductID;

						row6_HashRow.ProductCode = row6.ProductCode;

						row6_HashRow.ProductCategory = row6.ProductCategory;

						row6_HashRow.ProductSubCategory = row6.ProductSubCategory;

						row6_HashRow.Claim_id = row6.Claim_id;

						row6_HashRow.Ref_Product = row6.Ref_Product;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.commit();

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int DateID;

		public int getDateID() {
			return this.DateID;
		}

		public int code_Date;

		public int getCode_Date() {
			return this.code_Date;
		}

		public java.util.Date date;

		public java.util.Date getDate() {
			return this.date;
		}

		public int year;

		public int getYear() {
			return this.year;
		}

		public int month;

		public int getMonth() {
			return this.month;
		}

		public int day;

		public int getDay() {
			return this.day;
		}

		public String day_month_year;

		public String getDay_month_year() {
			return this.day_month_year;
		}

		public String lib_day;

		public String getLib_day() {
			return this.lib_day;
		}

		public String lib_month;

		public String getLib_month() {
			return this.lib_month;
		}

		public String day_month_letter;

		public String getDay_month_letter() {
			return this.day_month_letter;
		}

		public int day_of_year;

		public int getDay_of_year() {
			return this.day_of_year;
		}

		public int week_of_month;

		public int getWeek_of_month() {
			return this.week_of_month;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.date == null) ? 0 : this.date.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row7Struct other = (row7Struct) obj;

			if (this.date == null) {
				if (other.date != null)
					return false;

			} else if (!this.date.equals(other.date))

				return false;

			return true;
		}

		public void copyDataTo(row7Struct other) {

			other.DateID = this.DateID;
			other.code_Date = this.code_Date;
			other.date = this.date;
			other.year = this.year;
			other.month = this.month;
			other.day = this.day;
			other.day_month_year = this.day_month_year;
			other.lib_day = this.lib_day;
			other.lib_month = this.lib_month;
			other.day_month_letter = this.day_month_letter;
			other.day_of_year = this.day_of_year;
			other.week_of_month = this.week_of_month;

		}

		public void copyKeysDataTo(row7Struct other) {

			other.date = this.date;

		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.date = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.date, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.DateID = dis.readInt();

				this.code_Date = dis.readInt();

				this.year = dis.readInt();

				this.month = dis.readInt();

				this.day = dis.readInt();

				this.day_month_year = readString(dis, ois);

				this.lib_day = readString(dis, ois);

				this.lib_month = readString(dis, ois);

				this.day_month_letter = readString(dis, ois);

				this.day_of_year = dis.readInt();

				this.week_of_month = dis.readInt();

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.DateID);

				dos.writeInt(this.code_Date);

				dos.writeInt(this.year);

				dos.writeInt(this.month);

				dos.writeInt(this.day);

				writeString(this.day_month_year, dos, oos);

				writeString(this.lib_day, dos, oos);

				writeString(this.lib_month, dos, oos);

				writeString(this.day_month_letter, dos, oos);

				dos.writeInt(this.day_of_year);

				dos.writeInt(this.week_of_month);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("DateID=" + String.valueOf(DateID));
			sb.append(",code_Date=" + String.valueOf(code_Date));
			sb.append(",date=" + String.valueOf(date));
			sb.append(",year=" + String.valueOf(year));
			sb.append(",month=" + String.valueOf(month));
			sb.append(",day=" + String.valueOf(day));
			sb.append(",day_month_year=" + day_month_year);
			sb.append(",lib_day=" + lib_day);
			sb.append(",lib_month=" + lib_month);
			sb.append(",day_month_letter=" + day_month_letter);
			sb.append(",day_of_year=" + String.valueOf(day_of_year));
			sb.append(",week_of_month=" + String.valueOf(week_of_month));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.date, other.date);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row7Struct row7 = new row7Struct();

				/**
				 * [tAdvancedHash_row7 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row7", false);
				start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tAdvancedHash_row7 = 0;

				// connection name:row7
				// source node:tDBInput_6 - inputs:(after_tFileInputExcel_1) outputs:(row7,row7)
				// | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4,row5,row6,row7,row8)
				// outputs:(Fact_Complains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row7Struct>getLookup(matchingModeEnum_row7);

				globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);

				/**
				 * [tAdvancedHash_row7 begin ] stop
				 */

				/**
				 * [tDBInput_6 begin ] start
				 */

				ok_Hash.put("tDBInput_6", false);
				start_Hash.put("tDBInput_6", System.currentTimeMillis());

				currentComponent = "tDBInput_6";

				int tos_count_tDBInput_6 = 0;

				int nb_line_tDBInput_6 = 0;
				java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "org.postgresql.Driver";
				java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "postgres";

				final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:X44GYVq7hm/+HFmyA3ozKliTa+/GNRcep0WdHSfahak=");

				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;

				String url_tDBInput_6 = "jdbc:postgresql://" + "localhost" + ":" + "5432" + "/" + "PIB_DW";

				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6, dbUser_tDBInput_6,
						dbPwd_tDBInput_6);

				conn_tDBInput_6.setAutoCommit(false);

				java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

				String dbquery_tDBInput_6 = "SELECT \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"DateID\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"code_Date\", \n  \"PIB_"
						+ "DW\".\"public\".\"Dim_Date\".\"date\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"year\", \n  \"PIB_DW\".\"public\".\"Dim_Da"
						+ "te\".\"month\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"day\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"day_month_year\","
						+ " \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"lib_day\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"lib_month\", \n  \"PIB_DW\"."
						+ "\"public\".\"Dim_Date\".\"day_month_letter\", \n  \"PIB_DW\".\"public\".\"Dim_Date\".\"day_of_year\", \n  \"PIB_DW\".\"pub"
						+ "lic\".\"Dim_Date\".\"week_of_month\"\nFROM \"PIB_DW\".\"public\".\"Dim_Date\"";

				globalMap.put("tDBInput_6_QUERY", dbquery_tDBInput_6);
				java.sql.ResultSet rs_tDBInput_6 = null;

				try {
					rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
					java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
					int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

					String tmpContent_tDBInput_6 = null;

					while (rs_tDBInput_6.next()) {
						nb_line_tDBInput_6++;

						if (colQtyInRs_tDBInput_6 < 1) {
							row7.DateID = 0;
						} else {

							row7.DateID = rs_tDBInput_6.getInt(1);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 2) {
							row7.code_Date = 0;
						} else {

							row7.code_Date = rs_tDBInput_6.getInt(2);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 3) {
							row7.date = null;
						} else {

							row7.date = routines.system.JDBCUtil.getDate(rs_tDBInput_6, 3);
						}
						if (colQtyInRs_tDBInput_6 < 4) {
							row7.year = 0;
						} else {

							row7.year = rs_tDBInput_6.getInt(4);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 5) {
							row7.month = 0;
						} else {

							row7.month = rs_tDBInput_6.getInt(5);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 6) {
							row7.day = 0;
						} else {

							row7.day = rs_tDBInput_6.getInt(6);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 7) {
							row7.day_month_year = null;
						} else {

							row7.day_month_year = routines.system.JDBCUtil.getString(rs_tDBInput_6, 7, false);
						}
						if (colQtyInRs_tDBInput_6 < 8) {
							row7.lib_day = null;
						} else {

							row7.lib_day = routines.system.JDBCUtil.getString(rs_tDBInput_6, 8, false);
						}
						if (colQtyInRs_tDBInput_6 < 9) {
							row7.lib_month = null;
						} else {

							row7.lib_month = routines.system.JDBCUtil.getString(rs_tDBInput_6, 9, false);
						}
						if (colQtyInRs_tDBInput_6 < 10) {
							row7.day_month_letter = null;
						} else {

							row7.day_month_letter = routines.system.JDBCUtil.getString(rs_tDBInput_6, 10, false);
						}
						if (colQtyInRs_tDBInput_6 < 11) {
							row7.day_of_year = 0;
						} else {

							row7.day_of_year = rs_tDBInput_6.getInt(11);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_6 < 12) {
							row7.week_of_month = 0;
						} else {

							row7.week_of_month = rs_tDBInput_6.getInt(12);
							if (rs_tDBInput_6.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}

						/**
						 * [tDBInput_6 begin ] stop
						 */

						/**
						 * [tDBInput_6 main ] start
						 */

						currentComponent = "tDBInput_6";

						tos_count_tDBInput_6++;

						/**
						 * [tDBInput_6 main ] stop
						 */

						/**
						 * [tDBInput_6 process_data_begin ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 main ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
						}

						row7Struct row7_HashRow = new row7Struct();

						row7_HashRow.DateID = row7.DateID;

						row7_HashRow.code_Date = row7.code_Date;

						row7_HashRow.date = row7.date;

						row7_HashRow.year = row7.year;

						row7_HashRow.month = row7.month;

						row7_HashRow.day = row7.day;

						row7_HashRow.day_month_year = row7.day_month_year;

						row7_HashRow.lib_day = row7.lib_day;

						row7_HashRow.lib_month = row7.lib_month;

						row7_HashRow.day_month_letter = row7.day_month_letter;

						row7_HashRow.day_of_year = row7.day_of_year;

						row7_HashRow.week_of_month = row7.week_of_month;

						tHash_Lookup_row7.put(row7_HashRow);

						tos_count_tAdvancedHash_row7++;

						/**
						 * [tAdvancedHash_row7 main ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row7 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row7";

						/**
						 * [tAdvancedHash_row7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 process_data_end ] start
						 */

						currentComponent = "tDBInput_6";

						/**
						 * [tDBInput_6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_6 end ] start
						 */

						currentComponent = "tDBInput_6";

					}
				} finally {
					if (rs_tDBInput_6 != null) {
						rs_tDBInput_6.close();
					}
					if (stmt_tDBInput_6 != null) {
						stmt_tDBInput_6.close();
					}
					if (conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {

						conn_tDBInput_6.commit();

						conn_tDBInput_6.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}
				globalMap.put("tDBInput_6_NB_LINE", nb_line_tDBInput_6);

				ok_Hash.put("tDBInput_6", true);
				end_Hash.put("tDBInput_6", System.currentTimeMillis());

				/**
				 * [tDBInput_6 end ] stop
				 */

				/**
				 * [tAdvancedHash_row7 end ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				tHash_Lookup_row7.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tAdvancedHash_row7", true);
				end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row7 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_6 finally ] start
				 */

				currentComponent = "tDBInput_6";

				/**
				 * [tDBInput_6 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row7 finally ] start
				 */

				currentComponent = "tAdvancedHash_row7";

				/**
				 * [tAdvancedHash_row7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
		final static byte[] commonByteArrayLock_ETL_PIB_Fact_Complains = new byte[0];
		static byte[] commonByteArray_ETL_PIB_Fact_Complains = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer Profile_Code;

		public Integer getProfile_Code() {
			return this.Profile_Code;
		}

		public String Sexe;

		public String getSexe() {
			return this.Sexe;
		}

		public String Age;

		public String getAge() {
			return this.Age;
		}

		public String Marital_Status;

		public String getMarital_Status() {
			return this.Marital_Status;
		}

		public Float Change_Freq;

		public Float getChange_Freq() {
			return this.Change_Freq;
		}

		public Float Services_Sat_Rate_On5;

		public Float getServices_Sat_Rate_On5() {
			return this.Services_Sat_Rate_On5;
		}

		public Float Complain_Sat_Rate;

		public Float getComplain_Sat_Rate() {
			return this.Complain_Sat_Rate;
		}

		public Float Res_Time_Days_Expected;

		public Float getRes_Time_Days_Expected() {
			return this.Res_Time_Days_Expected;
		}

		public Float Price_Sat_Rate;

		public Float getPrice_Sat_Rate() {
			return this.Price_Sat_Rate;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Profile_Code == null) ? 0 : this.Profile_Code.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row8Struct other = (row8Struct) obj;

			if (this.Profile_Code == null) {
				if (other.Profile_Code != null)
					return false;

			} else if (!this.Profile_Code.equals(other.Profile_Code))

				return false;

			return true;
		}

		public void copyDataTo(row8Struct other) {

			other.Profile_Code = this.Profile_Code;
			other.Sexe = this.Sexe;
			other.Age = this.Age;
			other.Marital_Status = this.Marital_Status;
			other.Change_Freq = this.Change_Freq;
			other.Services_Sat_Rate_On5 = this.Services_Sat_Rate_On5;
			other.Complain_Sat_Rate = this.Complain_Sat_Rate;
			other.Res_Time_Days_Expected = this.Res_Time_Days_Expected;
			other.Price_Sat_Rate = this.Price_Sat_Rate;
			other.Type = this.Type;

		}

		public void copyKeysDataTo(row8Struct other) {

			other.Profile_Code = this.Profile_Code;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_PIB_Fact_Complains) {

				try {

					int length = 0;

					this.Profile_Code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Profile_Code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Sexe = readString(dis, ois);

				this.Age = readString(dis, ois);

				this.Marital_Status = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.Change_Freq = null;
				} else {
					this.Change_Freq = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Services_Sat_Rate_On5 = null;
				} else {
					this.Services_Sat_Rate_On5 = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Complain_Sat_Rate = null;
				} else {
					this.Complain_Sat_Rate = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Res_Time_Days_Expected = null;
				} else {
					this.Res_Time_Days_Expected = dis.readFloat();
				}

				length = dis.readByte();
				if (length == -1) {
					this.Price_Sat_Rate = null;
				} else {
					this.Price_Sat_Rate = dis.readFloat();
				}

				this.Type = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Sexe, dos, oos);

				writeString(this.Age, dos, oos);

				writeString(this.Marital_Status, dos, oos);

				if (this.Change_Freq == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Change_Freq);
				}

				if (this.Services_Sat_Rate_On5 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Services_Sat_Rate_On5);
				}

				if (this.Complain_Sat_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Complain_Sat_Rate);
				}

				if (this.Res_Time_Days_Expected == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Res_Time_Days_Expected);
				}

				if (this.Price_Sat_Rate == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Price_Sat_Rate);
				}

				writeString(this.Type, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Profile_Code=" + String.valueOf(Profile_Code));
			sb.append(",Sexe=" + Sexe);
			sb.append(",Age=" + Age);
			sb.append(",Marital_Status=" + Marital_Status);
			sb.append(",Change_Freq=" + String.valueOf(Change_Freq));
			sb.append(",Services_Sat_Rate_On5=" + String.valueOf(Services_Sat_Rate_On5));
			sb.append(",Complain_Sat_Rate=" + String.valueOf(Complain_Sat_Rate));
			sb.append(",Res_Time_Days_Expected=" + String.valueOf(Res_Time_Days_Expected));
			sb.append(",Price_Sat_Rate=" + String.valueOf(Price_Sat_Rate));
			sb.append(",Type=" + Type);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Profile_Code, other.Profile_Code);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputExcel_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row8Struct row8 = new row8Struct();

				/**
				 * [tAdvancedHash_row8 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row8", false);
				start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tAdvancedHash_row8 = 0;

				// connection name:row8
				// source node:tFileInputExcel_2 - inputs:(after_tFileInputExcel_1)
				// outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8)
				// outputs:()
				// linked node: tMap_1 - inputs:(row2,row3,row4,row5,row6,row7,row8)
				// outputs:(Fact_Complains)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row8Struct>getLookup(matchingModeEnum_row8);

				globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);

				/**
				 * [tAdvancedHash_row8 begin ] stop
				 */

				/**
				 * [tFileInputExcel_2 begin ] start
				 */

				ok_Hash.put("tFileInputExcel_2", false);
				start_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				currentComponent = "tFileInputExcel_2";

				int tos_count_tFileInputExcel_2 = 0;

				final String decryptedPassword_tFileInputExcel_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:9rNVIuJ1cSwymfyJIvYu9EqCDXl3Xt9Di4eWnA==");
				String password_tFileInputExcel_2 = decryptedPassword_tFileInputExcel_2;
				if (password_tFileInputExcel_2.isEmpty()) {
					password_tFileInputExcel_2 = null;
				}
				class RegexUtil_tFileInputExcel_2 {

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName,
							boolean useRegex) {

						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

						if (useRegex) {// this part process the regex issue

							java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
							for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
								String sheetName = sheet.getSheetName();
								java.util.regex.Matcher matcher = pattern.matcher(sheetName);
								if (matcher.matches()) {
									if (sheet != null) {
										list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
									}
								}
							}

						} else {
							org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
									.getSheet(oneSheetName);
							if (sheet != null) {
								list.add(sheet);
							}

						}

						return list;
					}

					public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(
							org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
						java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
						org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook
								.getSheetAt(index);
						if (sheet != null) {
							list.add(sheet);
						}
						return list;
					}

				}
				RegexUtil_tFileInputExcel_2 regexUtil_tFileInputExcel_2 = new RegexUtil_tFileInputExcel_2();

				Object source_tFileInputExcel_2 = "D:/PIB/Data/Profiling.xlsx";
				org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_2 = null;

				if (source_tFileInputExcel_2 instanceof String) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create(new java.io.File((String) source_tFileInputExcel_2), password_tFileInputExcel_2);
				} else if (source_tFileInputExcel_2 instanceof java.io.InputStream) {
					workbook_tFileInputExcel_2 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory
							.create((java.io.InputStream) source_tFileInputExcel_2, password_tFileInputExcel_2);
				} else {
					workbook_tFileInputExcel_2 = null;
					throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
				}
				try {

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_2 : workbook_tFileInputExcel_2) {
						sheetList_tFileInputExcel_2
								.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_2);
					}
					if (sheetList_tFileInputExcel_2.size() <= 0) {
						throw new RuntimeException("Special sheets not exist!");
					}

					java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_2 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
					for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
						if (sheet_FilterNull_tFileInputExcel_2 != null
								&& sheetList_FilterNull_tFileInputExcel_2.iterator() != null
								&& sheet_FilterNull_tFileInputExcel_2.iterator().hasNext()) {
							sheetList_FilterNull_tFileInputExcel_2.add(sheet_FilterNull_tFileInputExcel_2);
						}
					}
					sheetList_tFileInputExcel_2 = sheetList_FilterNull_tFileInputExcel_2;
					if (sheetList_tFileInputExcel_2.size() > 0) {
						int nb_line_tFileInputExcel_2 = 0;

						int begin_line_tFileInputExcel_2 = 1;

						int footer_input_tFileInputExcel_2 = 0;

						int end_line_tFileInputExcel_2 = 0;
						for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 : sheetList_tFileInputExcel_2) {
							end_line_tFileInputExcel_2 += (sheet_tFileInputExcel_2.getLastRowNum() + 1);
						}
						end_line_tFileInputExcel_2 -= footer_input_tFileInputExcel_2;
						int limit_tFileInputExcel_2 = -1;
						int start_column_tFileInputExcel_2 = 1 - 1;
						int end_column_tFileInputExcel_2 = -1;

						org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_2 = null;
						org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
								.get(0);
						int rowCount_tFileInputExcel_2 = 0;
						int sheetIndex_tFileInputExcel_2 = 0;
						int currentRows_tFileInputExcel_2 = (sheetList_tFileInputExcel_2.get(0).getLastRowNum() + 1);

						// for the number format
						java.text.DecimalFormat df_tFileInputExcel_2 = new java.text.DecimalFormat(
								"#.####################################");
						char decimalChar_tFileInputExcel_2 = df_tFileInputExcel_2.getDecimalFormatSymbols()
								.getDecimalSeparator();

						for (int i_tFileInputExcel_2 = begin_line_tFileInputExcel_2; i_tFileInputExcel_2 < end_line_tFileInputExcel_2; i_tFileInputExcel_2++) {

							int emptyColumnCount_tFileInputExcel_2 = 0;

							if (limit_tFileInputExcel_2 != -1 && nb_line_tFileInputExcel_2 >= limit_tFileInputExcel_2) {
								break;
							}

							while (i_tFileInputExcel_2 >= rowCount_tFileInputExcel_2 + currentRows_tFileInputExcel_2) {
								rowCount_tFileInputExcel_2 += currentRows_tFileInputExcel_2;
								sheet_tFileInputExcel_2 = sheetList_tFileInputExcel_2
										.get(++sheetIndex_tFileInputExcel_2);
								currentRows_tFileInputExcel_2 = (sheet_tFileInputExcel_2.getLastRowNum() + 1);
							}
							globalMap.put("tFileInputExcel_2_CURRENT_SHEET", sheet_tFileInputExcel_2.getSheetName());
							if (rowCount_tFileInputExcel_2 <= i_tFileInputExcel_2) {
								row_tFileInputExcel_2 = sheet_tFileInputExcel_2
										.getRow(i_tFileInputExcel_2 - rowCount_tFileInputExcel_2);
							}
							row8 = null;
							row8 = null;
							int tempRowLength_tFileInputExcel_2 = 10;

							int columnIndex_tFileInputExcel_2 = 0;

							String[] temp_row_tFileInputExcel_2 = new String[tempRowLength_tFileInputExcel_2];
							int excel_end_column_tFileInputExcel_2;
							if (row_tFileInputExcel_2 == null) {
								excel_end_column_tFileInputExcel_2 = 0;
							} else {
								excel_end_column_tFileInputExcel_2 = row_tFileInputExcel_2.getLastCellNum();
							}
							int actual_end_column_tFileInputExcel_2;
							if (end_column_tFileInputExcel_2 == -1) {
								actual_end_column_tFileInputExcel_2 = excel_end_column_tFileInputExcel_2;
							} else {
								actual_end_column_tFileInputExcel_2 = end_column_tFileInputExcel_2 > excel_end_column_tFileInputExcel_2
										? excel_end_column_tFileInputExcel_2
										: end_column_tFileInputExcel_2;
							}
							org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_2 = null;
							for (int i = 0; i < tempRowLength_tFileInputExcel_2; i++) {
								if (i + start_column_tFileInputExcel_2 < actual_end_column_tFileInputExcel_2) {
									org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_2 = row_tFileInputExcel_2
											.getCell(i + start_column_tFileInputExcel_2);
									if (cell_tFileInputExcel_2 != null) {
										switch (cell_tFileInputExcel_2.getCellType()) {
										case STRING:
											temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
													.getRichStringCellValue().getString();
											break;
										case NUMERIC:
											if (org.apache.poi.ss.usermodel.DateUtil
													.isCellDateFormatted(cell_tFileInputExcel_2)) {
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getDateCellValue().toString();
											} else {
												temp_row_tFileInputExcel_2[i] = df_tFileInputExcel_2
														.format(cell_tFileInputExcel_2.getNumericCellValue());
											}
											break;
										case BOOLEAN:
											temp_row_tFileInputExcel_2[i] = String
													.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
											break;
										case FORMULA:
											switch (cell_tFileInputExcel_2.getCachedFormulaResultType()) {
											case STRING:
												temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
														.getRichStringCellValue().getString();
												break;
											case NUMERIC:
												if (org.apache.poi.ss.usermodel.DateUtil
														.isCellDateFormatted(cell_tFileInputExcel_2)) {
													temp_row_tFileInputExcel_2[i] = cell_tFileInputExcel_2
															.getDateCellValue().toString();
												} else {
													ne_tFileInputExcel_2 = new org.apache.poi.ss.formula.eval.NumberEval(
															cell_tFileInputExcel_2.getNumericCellValue());
													temp_row_tFileInputExcel_2[i] = ne_tFileInputExcel_2
															.getStringValue();
												}
												break;
											case BOOLEAN:
												temp_row_tFileInputExcel_2[i] = String
														.valueOf(cell_tFileInputExcel_2.getBooleanCellValue());
												break;
											default:
												temp_row_tFileInputExcel_2[i] = "";
											}
											break;
										default:
											temp_row_tFileInputExcel_2[i] = "";
										}
									} else {
										temp_row_tFileInputExcel_2[i] = "";
									}

								} else {
									temp_row_tFileInputExcel_2[i] = "";
								}
							}
							boolean whetherReject_tFileInputExcel_2 = false;
							row8 = new row8Struct();
							int curColNum_tFileInputExcel_2 = -1;
							String curColName_tFileInputExcel_2 = "";
							try {
								columnIndex_tFileInputExcel_2 = 0;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Profile_Code";

									row8.Profile_Code = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row8.Profile_Code = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 1;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Sexe";

									row8.Sexe = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row8.Sexe = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 2;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Age";

									row8.Age = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row8.Age = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 3;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Marital_Status";

									row8.Marital_Status = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row8.Marital_Status = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 4;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Change_Freq";

									row8.Change_Freq = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row8.Change_Freq = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 5;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Services_Sat_Rate_On5";

									row8.Services_Sat_Rate_On5 = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row8.Services_Sat_Rate_On5 = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 6;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Complain_Sat_Rate";

									row8.Complain_Sat_Rate = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row8.Complain_Sat_Rate = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 7;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Res_Time_Days_Expected";

									row8.Res_Time_Days_Expected = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row8.Res_Time_Days_Expected = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 8;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Price_Sat_Rate";

									row8.Price_Sat_Rate = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(
											temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2], null,
											'.' == decimalChar_tFileInputExcel_2 ? null
													: decimalChar_tFileInputExcel_2));
								} else {
									row8.Price_Sat_Rate = null;
									emptyColumnCount_tFileInputExcel_2++;
								}
								columnIndex_tFileInputExcel_2 = 9;

								if (temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2].length() > 0) {
									curColNum_tFileInputExcel_2 = columnIndex_tFileInputExcel_2
											+ start_column_tFileInputExcel_2 + 1;
									curColName_tFileInputExcel_2 = "Type";

									row8.Type = temp_row_tFileInputExcel_2[columnIndex_tFileInputExcel_2];
								} else {
									row8.Type = null;
									emptyColumnCount_tFileInputExcel_2++;
								}

								nb_line_tFileInputExcel_2++;

							} catch (java.lang.Exception e) {
								whetherReject_tFileInputExcel_2 = true;
								System.err.println(e.getMessage());
								row8 = null;
							}

							/**
							 * [tFileInputExcel_2 begin ] stop
							 */

							/**
							 * [tFileInputExcel_2 main ] start
							 */

							currentComponent = "tFileInputExcel_2";

							tos_count_tFileInputExcel_2++;

							/**
							 * [tFileInputExcel_2 main ] stop
							 */

							/**
							 * [tFileInputExcel_2 process_data_begin ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_begin ] stop
							 */
// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tAdvancedHash_row8 main ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
								}

								row8Struct row8_HashRow = new row8Struct();

								row8_HashRow.Profile_Code = row8.Profile_Code;

								row8_HashRow.Sexe = row8.Sexe;

								row8_HashRow.Age = row8.Age;

								row8_HashRow.Marital_Status = row8.Marital_Status;

								row8_HashRow.Change_Freq = row8.Change_Freq;

								row8_HashRow.Services_Sat_Rate_On5 = row8.Services_Sat_Rate_On5;

								row8_HashRow.Complain_Sat_Rate = row8.Complain_Sat_Rate;

								row8_HashRow.Res_Time_Days_Expected = row8.Res_Time_Days_Expected;

								row8_HashRow.Price_Sat_Rate = row8.Price_Sat_Rate;

								row8_HashRow.Type = row8.Type;

								tHash_Lookup_row8.put(row8_HashRow);

								tos_count_tAdvancedHash_row8++;

								/**
								 * [tAdvancedHash_row8 main ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row8 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row8";

								/**
								 * [tAdvancedHash_row8 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFileInputExcel_2 process_data_end ] start
							 */

							currentComponent = "tFileInputExcel_2";

							/**
							 * [tFileInputExcel_2 process_data_end ] stop
							 */

							/**
							 * [tFileInputExcel_2 end ] start
							 */

							currentComponent = "tFileInputExcel_2";

						}

						globalMap.put("tFileInputExcel_2_NB_LINE", nb_line_tFileInputExcel_2);

					}

				} finally {

					if (!(source_tFileInputExcel_2 instanceof java.io.InputStream)) {
						workbook_tFileInputExcel_2.getPackage().revert();
					}

				}

				ok_Hash.put("tFileInputExcel_2", true);
				end_Hash.put("tFileInputExcel_2", System.currentTimeMillis());

				/**
				 * [tFileInputExcel_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row8 end ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				tHash_Lookup_row8.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tAdvancedHash_row8", true);
				end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputExcel_2 finally ] start
				 */

				currentComponent = "tFileInputExcel_2";

				/**
				 * [tFileInputExcel_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row8 finally ] start
				 */

				currentComponent = "tAdvancedHash_row8";

				/**
				 * [tAdvancedHash_row8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputExcel_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Fact_Complains Fact_ComplainsClass = new Fact_Complains();

		int exitCode = Fact_ComplainsClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Fact_Complains.class.getClassLoader()
					.getResourceAsStream("etl_pib/fact_complains_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Fact_Complains.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputExcel_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputExcel_1) {
			globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", -1);

			e_tFileInputExcel_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Fact_Complains");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 263476 characters generated by Talend Open Studio for Data Integration on the
 * April 3, 2022 12:23:19 AM BST
 ************************************************************************************************/